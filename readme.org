Port of modular-lang-proto from OCaml to Scala

Mostly to see if tests and types get any simpler

next up:
- [X] rewrite rules
- [ ] types for asts + builtins
  - make Symbol an enum
  - change sig of Macro, Builtin
  - change sig of Language.translate
- [ ] allow builtins in ast during macro expansion
- [ ] different base languages instead of hello
- [ ] integrate into tfi?


* Info for Scala/Metal/Emacs
** TODO indentation with metals
:PROPERTIES:
:CREATED:  <2024-01-26 Fri 21:57>
:END:

#+begin_src elisp
(use-package lsp-metals
  :ensure t
  :custom
  (lsp-metals-server-args
   '("-J-Dmetals.allow-multiline-string-formatting=off"))
  :hook (scala-mode . lsp))
#+end_src

** [[https://jointhefreeworld.org/blog/articles/emacs/Emacs%20and%20Scala%20setup%20with%20Eglot.html][Emacs and Scala setup with Eglot]]

** [[https://ag91.github.io/blog/2020/10/16/my-emacs-setup-for-scala-development/][My Emacs setup for Scala development - Where parallels cross]]

** [[https://scalameta.org/metals/docs/editors/emacs][Emacs | Metals]]

** [[https://www.youtube.com/watch?v=-xRfJcwhy7A][#Scala Crash Course by a Scala Veteran (with some JavaScript flavor)]]

** [[https://github.com/search?type=code&q=mkSbtDerivation][scala usage in nix on github]]

** [[https://duckduckgo.com/?t=ffab&q=emacs+metals+scala+eglot&ia=web][emacs metals scala eglot at DuckDuckGo]]
* TODO https://www.scala-sbt.org/0.13/docs/Process.html
:PROPERTIES:
:CREATED:  <2024-02-03 Sat 15:52>
:END:

* Scala resources
- [[https://docs.scala-lang.org/getting-started/index.html][Getting Started]]
- [[https://docs.scala-lang.org/scala3/book/introduction.html][Scala 3 — Book]]
- [[https://docs.scala-lang.org/scala3/reference/][Scala 3 Reference]]
- [[https://docs.scala-lang.org/tour/tour-of-scala.html][Tour of Scala]]

- [[https://scalac.io/blog/typeclasses-in-scala/][Type classes in Scala]]
- [[https://docs.scala-lang.org/scala3/reference/metaprogramming/reflection.html][Reflection]]

- [[https://www.scala-sbt.org/1.x/docs/][sbt Reference Manual]]
- [[https://docs.scala-lang.org/scala3/book/tools-sbt.html][Building and Testing Scala Projects with sbt]]
- [[https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html][sbt Reference Manual — Command Line Reference]]

- [[https://okmij.org/ftp/tagless-final/course/lecture.pdf][Typed Tagless Final Interpreters]]
- [[https://scalac.io/blog/tagless-final-pattern-for-scala-code/][Exploring Tagless Final pattern for extensive and readable Scala code]]
- [[http://lambda-the-ultimate.org/node/2232][The Expression Problem Revisited (Java approaches)]]
- [[https://www.scala-lang.org/docu/files/TheExpressionProblem.pdf][The expression problem (scala lang)]]
- [[https://www.beyondthelines.net/programming/introduction-to-tagless-final/][Introduction to Tagless final – Beyond the lines]]
- [[https://gist.github.com/OlivierBlanvillain/48bb5c66dbb0557da50465809564ee80][tfi.md revisiting tagless final interpreters]]
- [[https://www.slideshare.net/jdegoes/quark-a-purelyfunctional-scala-dsl-for-data-processing-analytics][Quark: A Purely-Functional Scala DSL for Data Processing & Analytics]]

- [[https://okmij.org/ftp/Computation/variables-effects.html][Free Variables and Free Effects]]
  
* Todos
** TODO drop Null
:PROPERTIES:
:CREATED:  <2024-01-28 Sun 15:24>
:END:
#+begin_src scala
extension [T](x: T | Null)
   inline def nn: T =
     assert(x != null)
     x.asInstanceOf[T]
#+end_src
From [[https://docs.scala-lang.org/scala3/reference/experimental/explicit-nulls.html#][Explicit Nulls]]

** DONE test framework finden
CLOSED: [2024-01-28 Sun 15:24]
** DONE trait zum ast produzieren definieren, damit generische tests schreiben
CLOSED: [2024-01-28 Sun 17:03]
** mit ocaml modular-lang-prot vergleichen
** andere ansaetze fuer expression problem sammeln
** TODO https://melpa.org/#/scala-ts-mode
:PROPERTIES:
:CREATED:  <2024-02-04 Sun 13:29>
* TODO val => def is nice
:PROPERTIES:
:CREATED:  <2024-02-22 Thu 22:02>
:END:
fixing ordering problems trivially
* TODO [[https://jastadd.cs.lth.se/web/extendj/][JastAdd.org]]
* [[https://www.cs.cornell.edu/projects/polyglot/][Polyglot extensible compiler framework]]
* [[https://www.cs.cornell.edu/Projects/jx/][J&: Nested Inheritance for Java]]
:PROPERTIES:
:CREATED:  <2024-02-11 Sun 00:08>
:END:
* TODO [[https://blog.devgenius.io/efficient-extensible-expressive-typed-tagless-final-interpreters-in-rust-1eae71c822e8][Efficient, Extensible, Expressive: Typed Tagless Final Interpreters in Rust]]
:PROPERTIES:
:CREATED:  <2024-02-24 Sat 01:30>
:END:

[[https://github.com/kurtschelfthout/finally-tagless/tree/main][kurtschelfthout/finally-tagless]]
[[https://github.com/michaelt/tagless][michaelt/tagless: oleg modules]]
* TODO [[https://blog.rockthejvm.com/full-stack-typelevel/][How to Write a Full-Stack Scala 3 Application with the Typelevel Stack]]
:PROPERTIES:
:CREATED:  <2024-02-24 Sat 01:52>
:END:
- see if there are useful scala features
- have a look at the DSLs
[[https://blog.rockthejvm.com/practical-type-level-programming/][Practical Type-Level Programming in Scala 3]]
* TODO macros for quickfix / code actions
:PROPERTIES:
:CREATED:  <2024-02-24 Sat 02:04>
:END:

@codeAction("simplify if" :doc "Double negation is harder to understand")
macro if(!#cond) #onTrue #onFalse => if(#cond) #onFalse #onTrue

@quickfix(removeSourceRange(beg, end))
error UnreachableCode(beg: Location, end: Location)

@quickfix(Warning, :doc "Please use standard order")
macro public static _ ... => static public _ ...

etc.
* TODO [[https://www.haskellforall.com/2024/02/unification-free-keyword-type-checking.html][Haskell for all: Unification-free ("keyword") type checking]]
:PROPERTIES:
:CREATED:  <2024-02-26 Mon 16:46>
:END:
* TODO [[https://github.com/williamdemeo/TypeFunc][williamdemeo/TypeFunc: Resources for type theory, functional programming, etc.]]
:PROPERTIES:
:CREATED:  <2024-02-26 Mon 16:58>
:END:
* TODO [[https://justinpombrio.net/2024/02/23/a-twist-on-Wadlers-printer.html][A Twist on Wadler's Printer]]
:PROPERTIES:
:CREATED:  <2024-02-26 Mon 17:09>
:END:
* Example languages

ast Expr
ast Add(lhs: Expr, rhs:Expr): Expr
ast Mul(lhs: Expr, rhs:Expr): Expr
ast If(cond: Expr, onT: Expr, onF: Expr): Expr
ast Loop(body: Expr): Expr

ast Type
ast Int(bit: int): Type

ast Toplevel
ast Function(sig: FunctionType, body: Expr): Toplevel

macro foo(x: Expr, y: Expr, t: Type): Expr


#+begin_src scala
type FromSymex[T]:
  def parse(args: List[SymEx]): Error[T]

given parseInt : FromSymex[Int]

given parseFn[I, O](using FromSymex[I]) : FromSymex[I => O]:

given apply[I, O](using parseFn: FromSymex[I => O], parseArg: FromSymex[I]) : FromSymex[O]:
  def parse(args: List[SymEx]): Error[T] =
    args match
    case hd :: remArgs =>
      val arg <- parseArg.parse(hd)
      val fn <- parseFn.parse(args)
      fn(arg)

def register[T : FromSymex](name: String, t: T) =
  symbols[name] = t

def translate(ex: SymEx) =
  ex match
  case Node(Leaf(name) :: args) =>
    val t <- symbols.lookup(name)
    t.parse(args)

// In Lang[?]
given parseExpr : FromSymex[l.Expr] = ... translate

// Add typeclass derivation providing a scope with all functions returning Expr registered

#+end_src
* TODO [[https://github.com/sdiehl/write-you-a-haskell/blob/master/chapter6/hoas.hs][HOAS in write you a haskell, book on functional compilers]]
:PROPERTIES:
:CREATED:  <2024-02-29 Thu 01:14>
:END:
unfortunately this has been abandoned
* TODO [[https://www.philipzucker.com/notes/Programming/macros-partial-eval/][Macros & Partial Evaluation | Hey There Buddo!]]
:PROPERTIES:
:CREATED:  <2024-02-29 Thu 02:00>
:END:
